// Code generated by MockGen. DO NOT EDIT.
// Source: service/item_service.go

// Package mock is a generated GoMock package.
package mock

import (
	model "backend/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIItemService is a mock of IItemService interface.
type MockIItemService struct {
	ctrl     *gomock.Controller
	recorder *MockIItemServiceMockRecorder
}

// MockIItemServiceMockRecorder is the mock recorder for MockIItemService.
type MockIItemServiceMockRecorder struct {
	mock *MockIItemService
}

// NewMockIItemService creates a new mock instance.
func NewMockIItemService(ctrl *gomock.Controller) *MockIItemService {
	mock := &MockIItemService{ctrl: ctrl}
	mock.recorder = &MockIItemServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIItemService) EXPECT() *MockIItemServiceMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockIItemService) Add(text string) (*model.Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", text)
	ret0, _ := ret[0].(*model.Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Add indicates an expected call of Add.
func (mr *MockIItemServiceMockRecorder) Add(text interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockIItemService)(nil).Add), text)
}

// Items mocks base method.
func (m *MockIItemService) Items() (*model.ItemsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Items")
	ret0, _ := ret[0].(*model.ItemsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Items indicates an expected call of Items.
func (mr *MockIItemServiceMockRecorder) Items() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Items", reflect.TypeOf((*MockIItemService)(nil).Items))
}
